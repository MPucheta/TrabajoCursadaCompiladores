integer _a; _b; _c,
_a := 2_i,
fun _funcion,
_b := - 1_i,

fun _f1(){
	void _g(){print('EJECUTADO G     '),}
	return(_g()), 
}
fun _f2(){
	uslinteger _i,
	_i := uslinteger(_c),
	return({print('CAMBIANDO EL VALOR DE _C A 1     '), 
		_c := 1_i,}), 
}

_a := _a + 2_i + _a * _b - _a / 2_i,
#_a debiera ser 1#

if (_a > 0_i)
	print('a mayor a 0  '),
else
	print('a no es mayor a 0  '),
end_if



if (_a = 1_i)
	{
	_funcion := _f1(),
	_funcion(),
	}
else
	print('a no es 1'),
end_if

_a := -1_i,
if (_a *_a * _a= -1_i)
	print('        puede que ande, a es -1'),
end_if

uslinteger _var4;_var5;_var6,
_var4:=16_ul,
_var5:=2_ul,
_var6:=2_ul+1_ul-1_ul,
_var4:=_var4*2_ul/_var5*_var6*1_ul*2_ul / 2_ul /1_ul *2_ul +2_ul*32_ul, 
_var4:=_var4*2_ul,
if(_var4=256_ul)
	print(' var 4 es 256 '),
end_if

_var4:=32_ul,
_var4:=_var4*4_ul/4_ul*4_ul/4_ul*4_ul/4_ul   *4_ul, #en realidad son todos 1/1 menos el ultimo #

if(_var4=128_ul)
	print(' var 4 es 128 '),
end_if

_var4:=0_ul,
_var5:=0_ul,

while(_var4<4_ul){
	print(' nueva ejecucion de while '),
	
	while(_var5<2_ul){
		_var5:=_var5+1_ul,
		if(_var5=2_ul)
			print(' saliendo del while _var5 es 2 '),
		end_if
	}
	
	if(_var5=2_ul){
		print(' reseteando _var5 '),
		_var5:=0_ul,
	}
	end_if
	
	_var4:=_var4+1_ul,
}

